ls()
load("C:\\Users\\pep\\Documents\\R\\llistat\\.RData")
numberofbits<- function(b) {
sum(as.integer(rawToBits(b)))
}
HistOfFile<- function(c) {
to.read = file(c, "rb")
hist<-integer(256)
readBin(to.read,raw(),1024)->c
while (length(c)==1024) {
hist<-hist+incbin(c);
readBin(to.read,raw(),1024)->c
}
hist<-hist+incbin(c)
close(to.read)
sum(hist)->zt
round(hist/zt*1000)->pes
noms<-as.raw(0:255)
resu<-data.frame(row.names=noms,hist,pes)
resu[3]<-sapply(noms,numberofbits)
resu
}
CalculateAverageBits<- function(c) {
b<-HistOfFile(c)
a<-sum(b[, 1]*b[, 3])
at<-sum(b[, 1])*8
resp<-a/at
resp
}
source(.trPaths[4], echo=TRUE, max.deparse.length=150)
ls()
ListDirs<-function(c){
file.info(dir(c,full.names=TRUE))[2]->f
row.names(f)[f[, 1]==TRUE]
}
ListAllDirs<-function(c){
level<-0
resp<-data.frame()
c1<-ListDirs(c)
while(length(c1)>0){
level<-level+1
z<-data.frame(nivell=level,dirs=c1)
resp<-rbind(resp,z)
c1<-ListDirs(c1)
}
resp
}
ListFileSizes<-function(c){
nivell<-c[[1]]
dirs<-as.character(c[[2]])
w<-file.info(dir(dirs,full.names=TRUE))
w<-w[w$isdir==FALSE,]
w[1]
}
source(.trPaths[4])
ls()
ListDirs("C:/")
read.table("llistat.txt",sep=",",header=TRUE)->llistat
setwd("C:/Users/pep/Documents/R")
read.table("llistat.txt",sep=",",header=TRUE)->llistat
ls.str()
llistat[llistat$nivell==1,]->r
r
ListFileSizes(r)->s
str(s)
s[51]
s[51,]
row.names(s[51,])
row.names(s)[51]
s[[51]]
s[[1]]
SizeOfFile(row.names(s)[51])
CalculateAverageBits(row.names(s)[51])
str(r)
as.character(r[[2]][4])->z
str(z)
ListDirs(z)
ListDirsAll(z)
source(.trPaths[5])
ListDirsAll(z)
ListAllDirs(z)
ListAllDirs(z)->z.dirs
names(z.dirs)
str(z.dirs)
ListFileSizes(z.dirs)->z.sizes
str(z.sizes)
CalculateAverageBits(row.names(z.sizes)[1])
SizeOfFile(row.names(z.sizes)[1])
names(z.avgbits)
str(z.avgbits)
sapply(z.files,CalculateAverageBits)->z.avgbits
str(z.avgbits)
str(z.sizes)
str(z.files)
row.names(z.sizes)->z.files
str(z.files)
sapply(z.files,CalculateAverageBits)->z.avgbits
names(z.avgbits)
str(z.avgbits)
mode(z)
summary(z.avgbits)
hist(z.avgbits)
getwd()
source("llistat_ini.r")
setwd("C:/Users/pep/Documents/R/llistat")
source("llistat_ini.r")
source("llistat_ini.r")
getwd()
source("llistat_ini.r")
ls()
str(z.files)
z.files[1]
CalculateSummaryByte(z.files[1])
a <- 0:255
b <- HistOg
b <- HistOg
b <- HistOfFile(z.files[1])
a^2
sum(a^2*b[, 2]/1000)
sorce("histiffile.R")
source("histoffile.R")
CalculateSummaryByte(z.files[1])
CalculateAverageBits(z.files[1])
help(system.time)
ptm <- proc.time
ptm
ptm <- proc.time()
ptm
proc.time()-ptm
help(file)
help(close)
help(dput)
time()
help(time)
date()
help(dput)
help(dput)
ptm
str(ptm)
ptm[3]
source("log_functions.R")
ls()
flog
WriteTextLog("Primer exemple. Escric aquest text: Hola Món")
a
b
WriteTextLog("Segon exemple. Escric aquest text: Hola Món")
c <- CalculateAverageBits(z.files[1])
c
WriteDataLog(c)
WriteTime0(); CalculateAverageBits(z.files[1]); WriteTime1()
dif.time <- proc.time()-ptm
str(dif.time)
dif.time[3]
save.image("C:\\Users\\pep\\Documents\\R\\llistat\\.RData")
ls() -> y
WriteDataLog(y)
dif.time
source('C:/Users/pep/Documents/R/llistat/llistat_ini.r')
ls()
getwd()
WriteTextLog("hola. Avui començo ací")
str(llistat$nivell)
max(llistat$nivell)
llistat[llistat$nivell==19,]
llistat[llistat$nivell==19,][[2]][3]
as.character(llistat$nivell==19,][[2]][3])->t
as.character(llistat[llistat$nivell==19,][[2]][3])->t
WriteTime0(); ListAllDirs(t) -> t.dirs; WriteTime1()
y
t.dirs
t
as.character(llistat[llistat$nivell==19,][[2]][1])->t
WriteTime0(); ListAllDirs(t) -> t.dirs; WriteTime1()
t
t.dirs
ListFileSizes(z.dirs)->z.sizes
WriteTime0(); ListFileSizes(t.dirs) -> t.sizes; WriteTime1()
t.sizes
CalculateAverageBits(row.names(t.sizes)[1])
getwd()
s <- data.frame(nivell=1, dirs="C:/Users/pep/Documents/R")
ListFileSizes(s)
row.names(z.sizes)->z.files
str(z.files)
sapply(z.files,CalculateAverageBits)->z.avgbits
hist(z.avgbits)
ListFileSizes(s) -> s.sizes
WriteTime0();sapply(s.files,CalculateAverageBits)->s.avgbits; WriteTime1()
WriteDataLog(s.avgbits)
row.names(s.sizes)->s.files
WriteTime0();sapply(s.files,CalculateAverageBits)->s.avgbits; WriteTime1()
WriteDataLog(s.avgbits)
summary(z.avgbits)
hist(z.avgbits)
summary(s.avgbits)
hist(s.avgbits)
s <- data.frame(nivell=1, dirs="C:/Users/pep/Documents")
ListFileSizes(s) -> s.sizes
str(s.files)
row.names(s.sizes)->s.files
str(s.files)
WriteTime0();sapply(s.files,CalculateAverageBits)->s.avgbits; WriteTime1()
WriteDataLog(s.avgbits,"llista_test.txt")
hist(s.avgbits)
summary(s.avgbits)
s <- ListAllDirs("C:/Users/pep/Documents")
str(s)
ListFileSizes(s) -> s.sizes
str(s.files)
ListFileSizes(s) -> s.sizes
str(s.files)
source('C:/Users/pep/Documents/R/llistat/log_functions.r')
source('C:/Users/pep/Documents/R/llistat/listardirs.R')
ListFileSizes(s) -> s.sizes
str(s.sizes)
source('C:/Users/pep/Documents/R/llistat/listardirs.R')
ListFileSizes(s) -> s.sizes
str(s.sizes)
row.names(s.sizes)->s.files
str(s.files)
source(.trPaths[5])
summary(s.avgbits)
str(s.avgbits)
help(summary)
help(hist)
source(.trPaths[4])
ls()
q()
quit()
source(.trPaths[4])
ls()
quit()
fix(CalculateAverageBits)
fix(CalculateAverageByte)
SizeOfFile("hora_inici000.tmp")
SizeOfFile(".RData")
SizeOfFile(".RData")/1024
HistOfFile("hora_inici000.tmp")
HistOfFile("hora_inici000.tmp")->w
fix(z.avgbits)
View(w)
fix(w)
View(w)
View(w)
names(w)
names(w)[3]
HistOfFile<- function(c) {
to.read = file(c, "rb")
# vector amb de 256 posicions (els valors que pot tenir un byte= 2^8). Tots els valos es posen a zero.
hist<-integer(256)
# obrim una connexiÃ³ amb el fitxer que volem llegir
readBin(to.read,raw(),1024)->c
# aname llegint 1  KB (1024 bytes fins que superem el final del fitxer (longitud de c<1024)
while (length(c)==1024) {
hist<-hist+incbin(c);
readBin(to.read,raw(),1024)->c
}
hist<-hist+incbin(c)
# tanquem la connexiÃ³
close(to.read)
# calculem la grandÃ ria en bytes
sum(hist)->zt
# calculem el pes de cada valor en tant per mil
round(hist/zt*1000)->pes
noms<-as.raw(0:255)
# retornem un data.frame amb el resultat:
# 1) l'histograma; 2) el pes de cada valor en tant per mil
# i com a nom de fila el valor de cada byte en hexadecimal
resu<-data.frame(row.names=noms,hist,pes)
resu[3]<-sapply(noms,numberofbits)
#canviar nom columna 3
# bits=1
names(resu)[3]="bits"
resu
}
fix(HistOfFile)
HistOfFile("log_functions.r")->w
View(w)
View(w)
setwd("~/R/tutorial_shiny")
install.packages("shiny")
install.packages("installr")
library(installr) #load / install+load installr
install.packages("~/R/installr_0.15.3.zip", repos = NULL)
library(installr) #load / install+load installr
